'use strict';
const obsidian = require('obsidian');

const VIEW_TYPE_CALENDAR = 'calendar-view';
const MONTHS_RU = [
    '–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å',
    '–ú–∞–π', '–ò—é–Ω—å', '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç',
    '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å'
];

class FullCalendarPlugin extends obsidian.Plugin {
    constructor(app, manifest) {
        super(app, manifest);
        this.settings = {
            storageFolder: 'Calendar'
        };
    }

    async onload() {
        console.log('Loading Full Calendar plugin...');
        await this.loadSettings();

        this.registerView(
            VIEW_TYPE_CALENDAR,
            (leaf) => new CalendarView(leaf, this.settings, this.app)
        );

        this.addRibbonIcon('calendar', 'Open Calendar', () => {
            this.activateView();
        });

        this.addSettingTab(new CalendarSettingTab(this.app, this));
    }
    async activateView() {
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≤–∫–ª–∞–¥–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        this.app.workspace.detachLeavesOfType(VIEW_TYPE_CALENDAR);

        // –û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –≤ —Ç–µ–∫—É—â–µ–º workspace
        await this.app.workspace.getLeaf().setViewState({
            type: VIEW_TYPE_CALENDAR,
            active: true,
        });

        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤–∫–ª–∞–¥–∫—É –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        const leaf = this.app.workspace.getLeavesOfType(VIEW_TYPE_CALENDAR)[0];
        if (leaf) {
            await this.app.workspace.revealLeaf(leaf);
        } else {
            console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –≤–∫–ª–∞–¥–∫—É –∫–∞–ª–µ–Ω–¥–∞—Ä—è!");
        }
    }
    async loadSettings() {
        console.log('Loading settings...');
        this.settings = Object.assign({}, this.settings, await this.loadData());
    }
    async saveSettings() {
        console.log('Saving settings...');
        await this.saveData(this.settings);
    }
}
class CalendarView extends obsidian.ItemView {
    constructor(leaf, settings, app) {
        super(leaf);
        this.settings = settings;
        this.app = app;
        this.currentDate = new Date(); // –¢–µ–∫—É—â–∞—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–∞—è –¥–∞—Ç–∞
    }

    getDisplayText() {
        return "–ö–∞–ª–µ–Ω–¥–∞—Ä—å"; // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤–∫–ª–∞–¥–∫–∏
    }
    getViewType() {
        return VIEW_TYPE_CALENDAR;
    }
    async onOpen() {
        const container = this.containerEl.children[1];
        if (!container) { console.error("–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!"); return; }
        container.empty();

        this.renderHeader(container);               // –†–µ–Ω–¥–µ—Ä —à–∞–ø–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        this.renderCalendar(container);             // –†–µ–Ω–¥–µ—Ä –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        await this.renderTodayEvents(container);    // –†–µ–Ω–¥–µ—Ä —Å–ø–∏—Å–æ–∫–∞ —Å–æ–±—ã—Ç–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    async refreshUI() {
        const container = this.containerEl.children[1];
        container.empty(); // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
        this.renderHeader(container);
        this.renderCalendar(container);
        await this.renderTodayEvents(container);

        // // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
        // this.updateCalendar();
        //
        // // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–Ω–±–∞–Ω
        // await this.renderTodayEvents(this.containerEl);
        //
        // // –û–±–Ω–æ–≤–ª—è–µ–º –¥—Ä—É–≥–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
    }

    renderCalendar(container) {
        // const calendarEl = container.querySelector(".calendar-grid");
        // if (calendarEl) {
        //     calendarEl.empty(); // –û—á–∏—â–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
        // } else {
        //     container.createEl("div", { cls: "calendar-grid" });
        // }
        // this.renderCalendarGrid(calendarEl, this.currentDate);

        const calendarEl = container.createEl("div", { cls: "calendar-grid" });
        this.renderCalendarGrid(calendarEl, this.currentDate);
    }                                                                                      // [–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è (—á–∞—Å—Ç—å 1 - –ø–æ —Å—É—Ç–∏ –º–æ–∂–Ω–æ –±—ã–ª–æ –≤ –æ–¥–Ω–æ–º –º–µ—Ç–æ–¥–µ)]
    renderCalendarGrid(container, date) {
        const month = date.getMonth();
        const year = date.getFullYear();
        const today = new Date();

        const daysInMonth = new Date(year, month + 1, 0).getDate();
        const firstDayOfMonth = new Date(year, month, 1).getDay();
        const startDay = firstDayOfMonth === 0 ? 6 : firstDayOfMonth - 1; // –ù–µ–¥–µ–ª—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞

        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ (–Ω–∞—á–∏–Ω–∞—è —Å –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞)
        const daysOfWeek = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"];
        daysOfWeek.forEach(day => {
            container.createEl("div", { cls: "calendar-day-header", text: day });
        });

        // –ü—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏ –¥–ª—è –¥–Ω–µ–π –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
        for (let i = 0; i < startDay; i++) {
            container.createEl("div", { cls: "calendar-day empty" });
        }

        // –Ø—á–µ–π–∫–∏ –¥–ª—è –¥–Ω–µ–π —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
        for (let day = 1; day <= daysInMonth; day++) {
            const dayEl = container.createEl("div", {
                cls: `calendar-day ${this.isToday(day, month, year) ? "today" : ""}`,
                text: day.toString()
            });

            // // –ß–∏—Å–ª–æ –¥–Ω—è
            // dayEl.createEl("div", {
            //     text: day.toString(),
            //     cls: "day-number"
            // });

            // –¢–æ—á–∫–∏ –¥–ª—è –∑–∞–º–µ—Ç–æ–∫
            const dotsEl = dayEl.createEl("div", { cls: "note-dots" });

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è
            const dateStr = `${day.toString().padStart(2, '0')}.${(month + 1).toString().padStart(2, '0')}.${year}`;
            const notePath = `${this.settings.storageFolder}/${dateStr}.md`;
            const file = this.app.vault.getAbstractFileByPath(notePath);

            if (file) {
                this.app.vault.read(file).then((content) => {
                    // –†–∞–∑–¥–µ–ª—è–µ–º –∑–∞–º–µ—Ç–∫–∏ –ø–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—é "---"
                    const notes = content.split("---").filter(note => note.trim() !== "");
                    const noteCount = notes.length;

                    // –î–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç–Ω—ã–µ –∫—Ä—É–∂–∫–∏
                    for (let i = 0; i < noteCount; i++) {
                        dotsEl.createEl("div", { cls: "note-dot" });
                    }
                });
            }

            dayEl.addEventListener("click", () => {
                this.openEventModal(day, month, year);
            });
        }
    }                                                                            // [–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞–ª—å–Ω–¥–∞—Ä—è (—Å–µ—Ç–∫–∞, —á–∞—Å—Ç—å 2)]
    renderTag(container, tag) {
        const tagEl = container.createEl("div", { cls: "tag-item" });

        // // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ü–≤–µ—Ç —Ç–µ–≥–∞
        // const colorCircle = tagEl.createEl("div", { cls: "tag-color" });
        // colorCircle.style.backgroundColor = tag.color;
        //
        // // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–≥–∞
        // const nameEl = tagEl.createEl("div", { cls: "tag-name" });
        // nameEl.setText(tag.name);

        // –ü–æ–ª–µ –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–∞
        const colorInput = tagEl.createEl("input", {
            type: "color",
            value: tag.color,
            cls: "tag-color-input"
        });
        colorInput.addEventListener("change", async (e) => {
            tag.color = e.target.value;
            await this.saveTags().then();
        });

        // –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–≥–∞
        const nameInput = tagEl.createEl("input", {
            type: "text",
            value: tag.name,
            cls: "tag-name"
        });
        // nameInput.addEventListener("change", async (e) => {
        //     tag.name = e.target.value;
        //     await this.saveTags().then();
        // });

        // –ö–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–≥–∞
        const editButton = tagEl.createEl("button", {
            text: "‚úèÔ∏è",
            cls: "tag-edit-button"
        });

        // –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–≥–∞
        const deleteButton = tagEl.createEl("button", {
            text: "üóëÔ∏è",
            cls: "tag-delete-button"
        });
        deleteButton.addEventListener("click", async () => {
            tagEl.remove();
            const tags = await this.loadTags();
            const updatedTags = tags.filter(t => t.name !== tag.name);
            await this.saveTags(updatedTags);
        });

        // // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
        // editButton.addEventListener("click", () => {
        //     // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –≤ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        //     this.toggleEditMode(tagEl, tag, editButton);
        // });
        //
        // // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        // tagEl.append(editButton, deleteButton);
        // container.append(tagEl);
    }                                                                                      // [–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–≥–æ–≤]
    renderHeader(container) {
        const header = container.createEl("div", { cls: "calendar-header" });

        // –ö–Ω–æ–ø–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
        const prevBtn = header.createEl("button", {
            text: "‚óÄ",
            cls: "nav-button"
        });
        prevBtn.addEventListener("click", () => this.changeMonth(-1));

        // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
        this.dateDisplay = header.createEl("div", {
            cls: "current-date",
            text: this.getFormattedDate()
        });

        // –ö–Ω–æ–ø–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–∞
        const nextBtn = header.createEl("button", {
            text: "‚ñ∂",
            cls: "nav-button"
        });
        nextBtn.addEventListener("click", () => this.changeMonth(1));

        // –ö–Ω–æ–ø–∫–∞ "–°–µ–≥–æ–¥–Ω—è"
        const todayBtn = header.createEl("button", {
            text: "–°–µ–≥–æ–¥–Ω—è",
            cls: "nav-button"
        });
        todayBtn.addEventListener("click", () => this.goToToday());

        // –ö–Ω–æ–ø–∫–∞ –º–µ–Ω—é
        const menuBtn = header.createEl("button", {
            cls: "menu-button"
        });
        // menuBtn.innerHTML = "&#9776;"; // –ò–∫–æ–Ω–∫–∞ –º–µ–Ω—é
        menuBtn.innerHTML = "#";
        menuBtn.addEventListener("click", () => this.openTagSettingsModal());
    }                                                                                        // [–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —à–∞–ø–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è]
    async renderTodayEvents(container) {
        const today = new Date();
        const dateStr = `${today.getDate().toString().padStart(2, '0')}.${(today.getMonth() + 1).toString().padStart(2, '0')}.${today.getFullYear()}`;
        const notePath = `${this.settings.storageFolder}/${dateStr}.md`;

        // –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–Ω–∏—é-—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        container.createEl("hr", { cls: "calendar-divider" });

        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ "–°–æ–±—ã—Ç–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"
        const title = container.createEl("div", { cls: "today-events-title" });
        title.setText("–°–æ–±—ã—Ç–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è");

        // // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
        // const kanbanContainer = container.querySelector(".kanban-container");
        // if (kanbanContainer) {
        //     kanbanContainer.empty();
        // } else {
        //     // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–∞–Ω–±–∞–Ω-–∫–∞—Ä—Ç–æ—á–µ–∫
        //     container.createEl("div", { cls: "kanban-container" });
        // }

        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–∞–Ω–±–∞–Ω-–∫–∞—Ä—Ç–æ—á–µ–∫
        const kanbanContainer = container.createEl("div", { cls: "kanban-container" });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è
        const file = this.app.vault.getAbstractFileByPath(notePath);
        if (file) {
            this.app.vault.read(file).then((content) => {
                const notes = content.split("---").filter(note => note.trim() !== "");

                notes.forEach((note) => {
                    // –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–±–∞–Ω-–∫–∞—Ä—Ç–æ—á–∫—É
                    const card = kanbanContainer.createEl("div", { cls: "kanban-card" });

                    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É
                    card.addEventListener("click", () => {
                        this.openNoteModal(note); // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –∑–∞–º–µ—Ç–∫–æ–π
                    });

                    // –†–∞–∑–¥–µ–ª—è–µ–º –∑–∞–º–µ—Ç–∫—É –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –∏ —É–±–∏—Ä–∞–µ–º –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è
                    const lines = note.trim().split("\n").filter(line => line.trim() !== "");
                    lines.forEach(async line => {
                        const value = line.split(":**").slice(1).join(":").trim();
                        if (value) {
                            // –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Ä–µ–º—è, –¥–æ–±–∞–≤–ª—è–µ–º –µ–µ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –≥—Ä–∞–Ω–∏—Ü–µ–π
                            if (line.includes("–í—Ä–µ–º—è:")) {
                                const timeContainer = card.createEl("div", { cls: "kanban-time" });
                                timeContainer.setText(value);
                            }
                            else if (line.includes("–¢–µ–≥:")) {
                                const tagEl = card.createEl("div", { cls: "kanban-tag" });
                                tagEl.setText(`#${value}`); // –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞–∫ "#"
                                tagEl.style.color = await this.getTagColor(value);
                                const tagColor = await this.getTagColor(value); // –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç —Ç–µ–≥–∞
                                tagEl.style.border = `1px solid ${tagColor}`; // –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—É
                            }
                            else if (line.includes("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:")) {
                                card.createEl("div", {
                                    text: value,
                                    cls: "kanban-card-option"
                                });
                            }
                            else {
                                card.createEl("div", {
                                    text: value,
                                    cls: "kanban-card-text"
                                });
                            }
                        }
                    });

                    // // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
                    // this.addHoverButtons(card, note);
                });
            });
        }
        else {
            kanbanContainer.createEl("div", {
                text: "–°–æ–±—ã—Ç–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç.",
                cls: "kanban-empty"
            });
        }

        // // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–ø–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π
        // const eventsContainer = container.createEl("div", { cls: "today-events" });
        // eventsContainer.createEl("h3", { text: "–°–æ–±—ã—Ç–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", cls: "today-events-title" });
        //
        // // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è
        // const file = this.app.vault.getAbstractFileByPath(notePath);
        // if (file) {
        //     this.app.vault.read(file).then((content) => {
        //         const notes = content.split("---").filter(note => note.trim() !== "");
        //
        //         notes.forEach((note) => {
        //             const noteEl = eventsContainer.createEl("div", { cls: "today-event" });
        //
        //             // –†–∞–∑–¥–µ–ª—è–µ–º –∑–∞–º–µ—Ç–∫—É –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –∏ —É–±–∏—Ä–∞–µ–º –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è
        //             const lines = note.trim().split("\n").filter(line => line.trim() !== "");
        //             lines.forEach(line => {
        //                 // –£–±–∏—Ä–∞–µ–º –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–¢–µ–∫—Å—Ç:", "–í—Ä–µ–º—è:")
        //                 const value = line.split(":**").slice(1).join(":").trim();
        //                 if (value) {
        //                     noteEl.createEl("div", {
        //                         text: value,
        //                         cls: "today-event-text"
        //                     });
        //                 }
        //             });
        //
        //             // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –∑–∞–º–µ—Ç–∫–∞–º–∏
        //             if (notes.length > 1) {
        //                 eventsContainer.createEl("hr", { cls: "today-event-separator" });
        //             }
        //         });
        //     });
        // } else {
        //     eventsContainer.createEl("div", {
        //         text: "–°–æ–±—ã—Ç–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç.",
        //         cls: "today-event-empty"
        //     });
        // }
    }                                                                             // [–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è]

    // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å
    goToToday() {
        this.currentDate = new Date(); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
        this.updateCalendar(); // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
    }

    // –ú–µ—Ç–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ –¥—Ä—É–≥–∏–µ –º–µ—Å—è—Ü—ã
    updateCalendar() {
        const container = this.containerEl.children[1];
        const oldCalendar = container.querySelector(".calendar-grid");

        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (oldCalendar) {
            oldCalendar.remove();
        }

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å
        this.renderCalendar(container);
        this.dateDisplay.setText(this.getFormattedDate()); // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    }

    getFormattedDate() {
        const month = MONTHS_RU[this.currentDate.getMonth()];
        const year = this.currentDate.getFullYear();
        return `${month} ${year}`;
    }
    changeMonth(offset) {
        const prevDate = new Date(this.currentDate);
        this.currentDate.setMonth(this.currentDate.getMonth() + offset);

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≥–æ–¥–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ —á–µ—Ä–µ–∑ –¥–µ–∫–∞–±—Ä—å/—è–Ω–≤–∞—Ä—å
        if (this.currentDate.getMonth() !== (prevDate.getMonth() + offset + 12) % 12) {
            this.currentDate.setFullYear(this.currentDate.getFullYear() + (offset > 0 ? 1 : -1));
        }

        this.animateCalendarTransition(offset);
    }
    animateCalendarTransition(offset) {
        const container = this.containerEl.children[1];
        const oldCalendar = container.querySelector(".calendar-grid");

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å
        const newCalendar = this.createCalendarGrid(this.currentDate);

        // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å
        newCalendar.style.position = "absolute";
        newCalendar.style.top = "0";
        newCalendar.style.left = offset > 0 ? "100%" : "-100%";
        newCalendar.style.opacity = "0";

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        container.appendChild(newCalendar);

        // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
        setTimeout(() => {
            oldCalendar.style.transform = `translateX(${offset > 0 ? "-100%" : "100%"})`;
            oldCalendar.style.opacity = "0";

            newCalendar.style.transform = "translateX(0)";
            newCalendar.style.opacity = "1";
        }, 10);

        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
        setTimeout(() => {
            oldCalendar.remove();
            newCalendar.style.position = "static";
            newCalendar.style.transform = "none";
        }, 300); // –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏ (300 –º—Å)

        this.dateDisplay.setText(this.getFormattedDate()); // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    }
    createCalendarGrid(date) {
        const calendarEl = document.createElement("div");
        calendarEl.classList.add("calendar-grid");
        this.renderCalendarGrid(calendarEl, date);
        return calendarEl;
    }
    isToday(day, month, year) {
        const today = new Date();
        return (
            day === today.getDate() &&
            month === today.getMonth() &&
            year === today.getFullYear()
        );
    }

    async openEventModal(day, month, year) {
        const dateStr = `${day.toString().padStart(2, '0')}.${(month + 1).toString().padStart(2, '0')}.${year}`;
        const notePath = `${this.settings.storageFolder}/${dateStr}.md`;

        const modal = new obsidian.Modal(this.app);
        modal.titleEl.setText(`–°–æ–±—ã—Ç–∏—è –Ω–∞ ${dateStr}`);

        const contentEl = modal.contentEl;

        const file = this.app.vault.getAbstractFileByPath(notePath);
        if (file) {
            this.app.vault.read(file).then((content) => {
                const notes = content.split("---").filter(note => note.trim() !== "");

                notes.forEach((note, index) => {
                    const noteEl = contentEl.createEl("div", { cls: "event-note" });

                    // –†–∞–∑–¥–µ–ª—è–µ–º –∑–∞–º–µ—Ç–∫—É –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –∏ —É–±–∏—Ä–∞–µ–º –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è
                    const lines = note.trim().split("\n").filter(line => line.trim() !== "");
                    lines.forEach(line => {
                        // –£–±–∏—Ä–∞–µ–º –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–¢–µ–∫—Å—Ç:", "–í—Ä–µ–º—è:")
                        const value = line.split(":**").slice(1).join(":").trim();
                        if (value) {
                            noteEl.createEl("div", {
                                text: value,
                                cls: "event-note-text"
                            });
                        }
                    });
                    // –ö–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏
                    const editButton = contentEl.createEl("button", {
                        text: "‚úèÔ∏è",
                        cls: "edit-note-button"
                    });
                    editButton.addEventListener("click", () => {
                        modal.close();
                        this.openEditNoteModal(day, month, year, index);
                    });

                    // –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏
                    const deleteButton = contentEl.createEl("button", {
                        text: "üóëÔ∏è",
                        cls: "delete-note-button"
                    });
                    deleteButton.addEventListener("click", async () => {
                        await this.deleteNote(day, month, year, index, modal);

                        // await this.refreshUI(); // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
                    });

                    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –∑–∞–º–µ—Ç–∫–∞–º–∏
                    if (notes.length > 1) {
                        contentEl.createEl("hr", { cls: "event-note-separator" });
                    }
                });
            });
        } else {
            contentEl.createEl("div", {
                text: "–°–æ–±—ã—Ç–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç.",
                cls: "today-event-empty"
            });
        }

        const addNoteButton = contentEl.createEl("button", {
            text: "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É",
            cls: "note-button"
        });
        addNoteButton.addEventListener("click", () => {
            modal.close();
            this.openAddNoteModal(day, month, year).then();
        });

        modal.open();
    }                                                                         // [–û—Ç–∫—Ä—ã—Ç–∏–µ –∑–∞–º–µ—Ç–∫–∏ –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è]

    openNoteModal(noteContent) {
        const modal = new obsidian.Modal(this.app);
        modal.titleEl.setText("–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–º–µ—Ç–∫–∏");

        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        const contentEl = modal.contentEl;
        contentEl.addClass("note-modal-content");

        // –†–∞–∑–¥–µ–ª—è–µ–º –∑–∞–º–µ—Ç–∫—É –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –∏ —É–±–∏—Ä–∞–µ–º –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è
        const lines = noteContent.trim().split("\n").filter(line => line.trim() !== "");
        lines.forEach(line => {
            const value = line.split(":**").slice(1).join(":").trim();
            if (value) {
                // –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Ä–µ–º—è, –¥–æ–±–∞–≤–ª—è–µ–º –µ–µ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –≥—Ä–∞–Ω–∏—Ü–µ–π
                if (line.includes("–í—Ä–µ–º—è:")) {
                    const timeContainer = contentEl.createEl("div", { cls: "note-modal-time" });
                    timeContainer.setText(value);
                }
                else if (line.includes("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:")) {
                    const optionContainer = contentEl.createEl("div", { cls: "note-modal-option" });
                    optionContainer.setText(value);
                    // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
                    contentEl.createEl("div", { cls: "option-divider" });
                }
                else {
                    contentEl.createEl("div", {
                        text: value,
                        cls: "note-modal-text"
                    });
                }
            }
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        modal.onOpen = () => {
            contentEl.style.opacity = "0";
            contentEl.style.transform = "translateY(20px)";
            setTimeout(() => {
                contentEl.style.opacity = "1";
                contentEl.style.transform = "translateY(0)";
            }, 10);
        };

        // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        modal.open();
    }
    addHoverButtons(card, note) {
        // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫
        const hoverButtons = card.createEl("div", { cls: "kanban-hover-buttons" });

        // –ö–Ω–æ–ø–∫–∞ "–ò–∑–º–µ–Ω–∏—Ç—å" (—Å–ª–µ–≤–∞)
        const editButton = hoverButtons.createEl("button", {
            text: "‚úèÔ∏è",
            cls: "kanban-edit-button"
        });
        editButton.addEventListener("click", () => {
            // –õ–æ–≥–∏–∫–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏
            console.log("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–º–µ—Ç–∫—É:", note);
        });

        // –ö–Ω–æ–ø–∫–∞ "–ó–∞–∫—Ä–µ–ø–∏—Ç—å" (–ø–æ —Ü–µ–Ω—Ç—Ä—É)
        const pinButton = hoverButtons.createEl("button", {
            text: "üìå",
            cls: "kanban-pin-button"
        });
        pinButton.addEventListener("click", () => {
            // –õ–æ–≥–∏–∫–∞ –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏
            console.log("–ó–∞–∫—Ä–µ–ø–∏—Ç—å –∑–∞–º–µ—Ç–∫—É:", note);
            card.classList.toggle("pinned");
            if (card.classList.contains("pinned")) {
                // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
                card.parentElement.prepend(card);
            }
        });

        // –ö–Ω–æ–ø–∫–∞ "–£–¥–∞–ª–∏—Ç—å" (—Å–ø—Ä–∞–≤–∞)
        const deleteButton = hoverButtons.createEl("button", {
            text: "üóëÔ∏è",
            cls: "kanban-delete-button"
        });
        deleteButton.addEventListener("click", () => {
            // –õ–æ–≥–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏
            console.log("–£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É:", note);
            card.remove();
        });
    }

    // –õ–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É —Ä–µ–∂–∏–º–∞–º–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–µ–≥–æ–≤
    toggleEditMode(tagEl, tag, editButton) {
        const isEditing = tagEl.classList.contains("editing");

        if (isEditing) {
            // –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            tagEl.classList.remove("editing");

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            const nameInput = tagEl.querySelector(".tag-name-input");
            const colorInput = tagEl.querySelector(".tag-color-input");

            if (nameInput && colorInput) {
                const newName = nameInput.value.trim();
                const newColor = colorInput.value;

                if (newName) {
                    tag.name = newName;
                    tag.color = newColor;

                    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    const nameEl = tagEl.querySelector(".tag-name");
                    const colorCircle = tagEl.querySelector(".tag-color");

                    if (nameEl && colorCircle) {
                        nameEl.setText(newName);
                        colorCircle.style.backgroundColor = newColor;
                    }

                    // –£–¥–∞–ª—è–µ–º –ø–æ–ª—è –≤–≤–æ–¥–∞
                    nameInput.replaceWith(nameEl);
                    colorInput.replaceWith(colorCircle);

                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–≥–∏
                    this.saveTags(this.tags);
                } else {
                    alert("–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–≥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!");
                }
            }

            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫—É "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
            editButton.setText("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å");
        } else {
            // –í—Ö–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            tagEl.classList.add("editing");

            // –ó–∞–º–µ–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–≥–∞ –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
            const nameEl = tagEl.querySelector(".tag-name");
            const nameInput = tagEl.createEl("input", {
                type: "text",
                value: tag.name,
                cls: "tag-name-input"
            });
            nameEl.replaceWith(nameInput);

            // –ó–∞–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç —Ç–µ–≥–∞ –Ω–∞ –ø–æ–ª–µ –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–∞
            const colorCircle = tagEl.querySelector(".tag-color");
            const colorInput = tagEl.createEl("input", {
                type: "color",
                value: tag.color,
                cls: "tag-color-input"
            });
            colorCircle.replaceWith(colorInput);

            // –ú–µ–Ω—è–µ–º –∫–Ω–æ–ø–∫—É "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å" –Ω–∞ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"
            editButton.setText("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å");
        }
    }

    // async addNewTag(container) {
    //     // const newTag = { name: "–ù–æ–≤—ã–π —Ç–µ–≥", color: "#cccccc" };
    //     // this.renderTag(container, newTag);
    //     // this.saveTags();
    //
    //     const newTag = { name: "–ù–æ–≤—ã–π —Ç–µ–≥", color: "#cccccc" };
    //     this.renderTag(container, newTag);
    //
    //     // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ç–µ–≥–∏
    //     const tags = await this.loadTags();
    //
    //     // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç–µ–≥
    //     tags.push(newTag);
    //
    //     // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤
    //     await this.saveTags(tags);
    // }
    async openTagSettingsModal() {
        // const modal = new obsidian.Modal(this.app);
        // modal.titleEl.setText("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–≥–∞–º–∏");
        //
        // // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        // const contentEl = modal.contentEl;
        // contentEl.addClass("tag-settings-modal");
        //
        // // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ç–µ–≥–∏
        // let tags = await this.loadTags();
        //
        // // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤
        // const tagsList = contentEl.createEl("div", { cls: "tags-list" });
        // tags.forEach(tag => this.renderTag(tagsList, tag));
        //
        // // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–µ–≥–∞
        // const addTagButton = contentEl.createEl("button", {
        //     text: "–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–≥",
        //     cls: "add-tag-button"
        // });
        // addTagButton.addEventListener("click", () => this.addNewTag(tagsList));
        //
        // // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        // modal.open();
        const modal = new obsidian.Modal(this.app);
        modal.titleEl.setText("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–≥–∞–º–∏");

        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        const contentEl = modal.contentEl;
        contentEl.addClass("tag-settings-modal");

        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ç–µ–≥–∏
        const tags = await this.loadTags();

        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤
        const tagsList = contentEl.createEl("div", { cls: "tags-list" });
        tags.forEach(tag => this.renderTag(tagsList, tag));

        // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        contentEl.createEl("hr", { cls: "tag-divider" });

        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–µ–≥–∞
        const newTagContainer = contentEl.createEl("div", { cls: "new-tag-container" });

        // –ü–æ–ª–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–∞ –Ω–æ–≤–æ–≥–æ —Ç–µ–≥–∞
        // contentEl.createEl("label", { text: "–¶–≤–µ—Ç —Ç–µ–≥–∞:" });
        const newTagColorInput = newTagContainer.createEl("input", {
            type: "color",
            value: "#000000", // –ß–µ—Ä–Ω—ã–π —Ü–≤–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            cls: "new-tag-color"
        });

        // –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–µ–≥–∞
        // contentEl.createEl("label", { text: "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–≥–∞:" });
        const newTagNameInput = newTagContainer.createEl("input", {
            type: "text",
            placeholder: "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–≥–∞...",
            cls: "new-tag-input"
        });

        // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–µ–≥–∞
        const addTagButton = newTagContainer.createEl("button", {
            text: "+",
            cls: "add-tag-button"
        });
        addTagButton.addEventListener("click", async () => {
            const newTagName = newTagNameInput.value.trim();
            const newTagColor = newTagColorInput.value;

            if (newTagName) {
                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–µ–≥
                const newTag = { name: newTagName, color: newTagColor };

                // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç–µ–≥ –≤ —Å–ø–∏—Å–æ–∫
                tags.push(newTag);

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤
                await this.saveTags(tags);

                // –û—á–∏—â–∞–µ–º –ø–æ–ª—è –≤–≤–æ–¥–∞
                newTagNameInput.value = "";
                newTagColorInput.value = "#000000";

                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
                tagsList.empty();
                tags.forEach(tag => this.renderTag(tagsList, tag));
            } else {
                alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–≥–∞!");
            }
        });

        // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        modal.open();
    }
    async openAddNoteModal(day, month, year) {
        const dateStr = `${day.toString().padStart(2, '0')}.${(month + 1).toString().padStart(2, '0')}.${year}`;//EDITED
        const modal = new obsidian.Modal(this.app);
        modal.titleEl.setText(`–î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –Ω–∞ ${dateStr}`);

        const contentEl = modal.contentEl;

        // –ü–æ–ª–µ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –∑–∞–º–µ—Ç–∫–∏
        contentEl.createEl("label", { text: "–¢–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏:" });
        const noteInput = contentEl.createEl("textarea", {
            placeholder: "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏...",
            cls: "note-input"
        });

        // –ü–æ–ª–µ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ "—Å"
        contentEl.createEl("label", { text: "–í—Ä–µ–º—è —Å:" });
        const timeFromInput = contentEl.createEl("input", {
            type: "time",
            cls: "note-input"
        });

        // –ü–æ–ª–µ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ "–ø–æ"
        contentEl.createEl("label", { text: "–í—Ä–µ–º—è –ø–æ:" });
        const timeToInput = contentEl.createEl("input", {
            type: "time",
            cls: "note-input"
        });

        // –ü–æ–ª–µ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–≤–µ–¥–µ–Ω–∏–π
        contentEl.createEl("label", { text: "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–µ–¥–µ–Ω–∏—è:" });
        const detailsInput = contentEl.createEl("textarea", {
            placeholder: "–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–µ–¥–µ–Ω–∏—è...",
            cls: "note-input"
        });

        // –ü–æ–ª–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–µ–≥–∞
        contentEl.createEl("label", { text: "–¢–µ–≥:" });
        const tagSelect = contentEl.createEl("select", {
            cls: "note-input"
        });

        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–≥–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫
        const tags = await this.loadTags();

        // –ï—Å–ª–∏ —Ç–µ–≥–æ–≤ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–µ–≥–∞
        if (tags.length === 0) {
            const createTagOption = tagSelect.createEl("option", {
                value: "",
                text: "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–µ–≥",
                disabled: true,
                selected: true
            });
        } else {
            // –î–æ–±–∞–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–µ–≥–∏ –≤ –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫
            tags.forEach(tag => {
                const option = tagSelect.createEl("option", {
                    value: tag.name,
                    text: tag.name
                });
                option.style.color = tag.color; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞
            });
        }

        // –ü–æ–ª–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–µ–≥–∞ (–ø–æ—è–≤–ª—è–µ—Ç—Å—è, –µ—Å–ª–∏ —Ç–µ–≥–æ–≤ –Ω–µ—Ç)
        let newTagNameInput, newTagColorInput;
        const newTagContainer = contentEl.createEl("div", { cls: "new-tag-container" });
        if (tags.length === 0) {
            newTagContainer.createEl("label", { text: "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–≥–∞:" });
            newTagNameInput = newTagContainer.createEl("input", {
                type: "text",
                placeholder: "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–≥–∞...",
                cls: "note-input"
            });

            newTagContainer.createEl("label", { text: "–¶–≤–µ—Ç —Ç–µ–≥–∞:" });
            newTagColorInput = newTagContainer.createEl("input", {
                type: "color",
                cls: "note-input"
            });
        }

        // –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏
        const saveButton = contentEl.createEl("button", {
            text: "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
            cls: "note-button"
        });
        saveButton.addEventListener("click", async () => {
            const noteContent = noteInput.value.trim();
            const timeFrom = timeFromInput.value;
            const timeTo = timeToInput.value;
            const details = detailsInput.value.trim();
            let tag = tagSelect.value;

            // –ï—Å–ª–∏ —Ç–µ–≥–æ–≤ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–µ–≥
            if (tags.length === 0) {
                if (!newTagNameInput || !newTagColorInput) {
                    alert("–û—à–∏–±–∫–∞: –ø–æ–ª—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!");
                    return;
                }

                const newTagName = newTagNameInput.value.trim();
                const newTagColor = newTagColorInput.value;

                if (newTagName) {
                    const newTag = { name: newTagName, color: newTagColor };
                    tags.push(newTag);
                    await this.saveTags(tags); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ç–µ–≥
                    tag = newTagName; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Ç–µ–≥ –¥–ª—è –∑–∞–º–µ—Ç–∫–∏
                } else {
                    alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–≥–∞!");
                    return;
                }
            }

            if (noteContent) {
                const fullNote = [
                    `**–¢–µ–∫—Å—Ç:** ${noteContent}`,
                    `**–í—Ä–µ–º—è:** —Å ${timeFrom} –ø–æ ${timeTo}`,
                    `**–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:** ${details}`,
                    `**–¢–µ–≥:** ${tag}`
                ].join("\n");

                const notePath = `${this.settings.storageFolder}/${dateStr}.md`;
                const file = this.app.vault.getAbstractFileByPath(notePath);

                try {
                    if (file) {
                        const existingContent = await this.app.vault.read(file);
                        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –ø–µ—Ä–µ–¥ –Ω–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–æ–π
                        await this.app.vault.modify(file, `${existingContent}\n\n---\n\n${fullNote}`);
                    } else {
                        await this.app.vault.create(notePath, fullNote);
                    }
                    modal.close();
                    this.openEventModal(day, month, year); // –ü–µ—Ä–µ–æ—Ç–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ —Å–æ–±—ã—Ç–∏–π

                    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                    await this.refreshUI();
                } catch (error) {
                    console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏:", error);
                }
            }
        });

        modal.open();
    }
    async getTagColor(tagName) {
        const tags = await this.loadTags(); // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–≥–∏
        if (!Array.isArray(tags)) {
            console.error("–û—à–∏–±–∫–∞: —Ç–µ–≥–∏ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º!");
            return "#000000"; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —á–µ—Ä–Ω—ã–π —Ü–≤–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        }

        const tag = tags.find(t => t.name === tagName);
        return tag ? tag.color : "#000000"; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ü–≤–µ—Ç —Ç–µ–≥–∞ –∏–ª–∏ —á–µ—Ä–Ω—ã–π, –µ—Å–ª–∏ —Ç–µ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω
    }
    async loadTags() {
        const tagsFolder = `${this.settings.storageFolder}/tags`;
        const tagsFilePath = `${tagsFolder}/tags.json`;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–∞–ø–∫–∞ .tags
        const tagsFolderExists = this.app.vault.getAbstractFileByPath(tagsFolder);
        if (!tagsFolderExists) {
            try {
                await this.app.vault.createFolder(tagsFolder);
            } catch (error) {
                console.error("–ü–∞–ø–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
            }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª tags.json
        const tagsFile = this.app.vault.getAbstractFileByPath(tagsFilePath);
        if (!tagsFile) {
            try {
                await this.app.vault.create(tagsFilePath, JSON.stringify([])); // –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            } catch (error) {
                console.error("–§–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
            }
            return []; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
        }

        const tagsData = await this.app.vault.read(tagsFile);
        return JSON.parse(tagsData);

        // // –ß–∏—Ç–∞–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–≥–∏ –∏–∑ —Ñ–∞–π–ª–∞
        // try {
        //     const tagsData = await this.app.vault.read(tagsFile);
        //     const tags = JSON.parse(tagsData);
        //
        //     // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ tags - —ç—Ç–æ –º–∞—Å—Å–∏–≤
        //     return Array.isArray(tags) ? tags : [];
        // } catch (error) {
        //     console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–≥–æ–≤:", error);
        //     return []; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        // }
    }
    async saveTags(tags) {
        const tagsFolder = `${this.settings.storageFolder}/tags`;
        const tagsFilePath = `${tagsFolder}/tags.json`;

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–≥–∏ –≤ —Ñ–∞–π–ª
        await this.app.vault.adapter.write(tagsFilePath, JSON.stringify(tags, null, 2));
    }

    async deleteNote(day, month, year, index, modal) {
        const dateStr = `${day.toString().padStart(2, '0')}.${(month + 1).toString().padStart(2, '0')}.${year}`;
        const notePath = `${this.settings.storageFolder}/${dateStr}.md`;
        const file = this.app.vault.getAbstractFileByPath(notePath);

        if (file) {
            const content = await this.app.vault.read(file);
            const notes = content.split("---").filter(note => note.trim() !== "");
            const updatedContent = notes.filter((_, i) => i !== index).join("\n\n---\n\n");

            await this.app.vault.modify(file, updatedContent);

            modal.close();

            await this.openEventModal(day, month, year);

            await this.refreshUI();
        }
    }                                                                      // [–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏]
    async openEditNoteModal(day, month, year, index) {
        const dateStr = `${day.toString().padStart(2, '0')}.${(month + 1).toString().padStart(2, '0')}.${year}`;
        const notePath = `${this.settings.storageFolder}/${dateStr}.md`;
        const file = this.app.vault.getAbstractFileByPath(notePath);

        if (!file) {
            console.error("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!");
            return;
        }

        const modal = new obsidian.Modal(this.app);
        modal.titleEl.setText(`–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–º–µ—Ç–∫—É –Ω–∞ ${dateStr}`);

        const contentEl = modal.contentEl;

        // –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
        const content = await this.app.vault.read(file);
        const notes = content.split("---").filter(note => note.trim() !== "");
        const noteToEdit = notes[index];

        if (!noteToEdit) {
            console.error("–ó–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!");
            return;
        }

        // –ü–∞—Ä—Å–∏–º –∑–∞–º–µ—Ç–∫—É
        const lines = noteToEdit.trim().split("\n").filter(line => line.trim() !== "");
        let noteContent = "";
        let timeFrom = "";
        let timeTo = "";
        let tag = "";

        lines.forEach(line => {
            if (line.startsWith("**–¢–µ–∫—Å—Ç:**")) {
                noteContent = line.split(":**")[1].trim();
            } else if (line.startsWith("**–í—Ä–µ–º—è:**")) {
                const timeParts = line.split(":**")[1].trim().split(" –ø–æ ");
                timeFrom = timeParts[0].replace("—Å ", "").trim();
                timeTo = timeParts[1].trim();
            } else if (line.startsWith("**–¢–µ–≥:**")) {
                tag = line.split(":**")[1].trim();
            }
        });

        // –ü–æ–ª–µ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –∑–∞–º–µ—Ç–∫–∏
        contentEl.createEl("label", { text: "–¢–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏:" });
        const noteInput = contentEl.createEl("textarea", {
            placeholder: "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏...",
            cls: "note-input",
            value: noteContent
        });

        // –ü–æ–ª–µ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ "—Å"
        contentEl.createEl("label", { text: "–í—Ä–µ–º—è —Å:" });
        const timeFromInput = contentEl.createEl("input", {
            type: "time",
            cls: "note-input",
            value: timeFrom
        });

        // –ü–æ–ª–µ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ "–ø–æ"
        contentEl.createEl("label", { text: "–í—Ä–µ–º—è –ø–æ:" });
        const timeToInput = contentEl.createEl("input", {
            type: "time",
            cls: "note-input",
            value: timeTo
        });

        // –ü–æ–ª–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–µ–≥–∞
        contentEl.createEl("label", { text: "–¢–µ–≥:" });
        const tagSelect = contentEl.createEl("select", {
            cls: "note-input"
        });

        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–≥–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫
        const tags = await this.loadTags();
        tags.forEach(t => {
            const option = tagSelect.createEl("option", {
                value: t.name,
                text: t.name
            });
            option.style.color = t.color; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞
            if (t.name === tag) {
                option.selected = true; // –í—ã–±–∏—Ä–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–µ–≥
            }
        });

        // –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
        const saveButton = contentEl.createEl("button", {
            text: "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
            cls: "note-button"
        });
        saveButton.addEventListener("click", async () => {
            const newNoteContent = noteInput.value.trim();
            const newTimeFrom = timeFromInput.value;
            const newTimeTo = timeToInput.value;
            const newTag = tagSelect.value;

            if (newNoteContent) {
                // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–º–µ—Ç–∫—É –≤ —Å–ø–∏—Å–∫–µ
                notes[index] = [
                    `**–¢–µ–∫—Å—Ç:** ${newNoteContent}`,
                    `**–í—Ä–µ–º—è:** —Å ${newTimeFrom} –ø–æ ${newTimeTo}`,
                    `**–¢–µ–≥:** ${newTag}`
                ].join("\n");

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫ –≤ —Ñ–∞–π–ª
                const updatedContent = notes.join("\n\n---\n\n");
                await this.app.vault.modify(file, updatedContent);

                // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
                modal.close();

                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                await this.refreshUI();
            } else {
                alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏!");
            }
        });

        // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        modal.open();
    }

    async saveEventToNote(dateStr, content) {
        const notePath = `${this.settings.storageFolder}/${dateStr}.md`;

        try {
            const file = this.app.vault.getAbstractFileByPath(notePath);
            if (file) {
                const existingContent = await this.app.vault.read(file);
                await this.app.vault.modify(file, `${existingContent}\n${content}`);
            } else {
                await this.app.vault.create(notePath, `# ${dateStr}\n\n${content}`);
            }
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è:", error);
        }
    }
}
class CalendarSettingTab extends obsidian.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.plugin = plugin;
    }

    display() {
        const { containerEl } = this;

        containerEl.empty();

        new obsidian.Setting(containerEl)
            .setName('–ü–∞–ø–∫–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π')
            .setDesc('–£–∫–∞–∂–∏—Ç–µ –ø–∞–ø–∫—É, –≥–¥–µ –±—É–¥—É—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –∑–∞–º–µ—Ç–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è')
            .addText(text => {
                text.setPlaceholder('–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ')
                    .setValue(this.plugin.settings.storageFolder)
                    .onChange(async (value) => {
                        this.plugin.settings.storageFolder = value;
                        await this.plugin.saveSettings();
                    });
            })
            .addButton(button => {
                button.setButtonText('–í—ã–±—Ä–∞—Ç—å –ø–∞–ø–∫—É')
                    .onClick(async () => {
                        const selectedFolder = await this.chooseFolder();
                        if (selectedFolder) {
                            this.plugin.settings.storageFolder = selectedFolder;
                            await this.plugin.saveSettings();
                            this.display();
                        }
                    });
            });
    }

    async chooseFolder() {
        return new Promise((resolve) => {
            const modal = new FolderSuggestModal(this.app, (folder) => {
                resolve(folder);
            });
            modal.open();
        });
    }
}
class FolderSuggestModal extends obsidian.SuggestModal {
    constructor(app, callback) {
        super(app);
        this.callback = callback;
    }

    getSuggestions(query) {
        const folders = this.app.vault.getAllLoadedFiles()
            .filter(file => file instanceof obsidian.TFolder)
            .map(folder => folder.path);

        return folders.filter(folder =>
            folder.toLowerCase().includes(query.toLowerCase())
        );
    }

    renderSuggestion(folder, el) {
        el.createEl("div", { text: folder });
    }

    onChooseSuggestion(folder, evt) {
        this.callback(folder);
    }
}

module.exports = FullCalendarPlugin;